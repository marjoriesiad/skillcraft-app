import { PrismaClient } from '@prisma/client'

const prisma = new PrismaClient()

// Donn√©es de seed pour les comp√©tences
const skillsData = [
  // Frontend
  { name: 'React', description: 'Biblioth√®que JavaScript pour construire des interfaces utilisateur', category: 'Frontend', color: '#61DAFB', icon: '‚öõÔ∏è' },
  { name: 'Vue.js', description: 'Framework JavaScript progressif', category: 'Frontend', color: '#4FC08D', icon: 'üü¢' },
  { name: 'Angular', description: 'Framework web d√©velopp√© par Google', category: 'Frontend', color: '#DD0031', icon: 'üÖ∞Ô∏è' },
  { name: 'TypeScript', description: 'Superset typ√© de JavaScript', category: 'Frontend', color: '#3178C6', icon: 'üìò' },
  { name: 'Tailwind CSS', description: 'Framework CSS utility-first', category: 'Frontend', color: '#06B6D4', icon: 'üé®' },
  { name: 'Sass/SCSS', description: 'Pr√©processeur CSS', category: 'Frontend', color: '#CF649A', icon: 'üíÑ' },
  
  // Backend
  { name: 'Node.js', description: 'Runtime JavaScript c√¥t√© serveur', category: 'Backend', color: '#339933', icon: 'üü¢' },
  { name: 'Python', description: 'Langage de programmation polyvalent', category: 'Backend', color: '#3776AB', icon: 'üêç' },
  { name: 'Java', description: 'Langage de programmation orient√© objet', category: 'Backend', color: '#ED8B00', icon: '‚òï' },
  { name: 'PHP', description: 'Langage de script c√¥t√© serveur', category: 'Backend', color: '#777BB4', icon: 'üêò' },
  { name: 'C#', description: 'Langage d√©velopp√© par Microsoft', category: 'Backend', color: '#239120', icon: 'üî∑' },
  { name: 'Go', description: 'Langage d√©velopp√© par Google', category: 'Backend', color: '#00ADD8', icon: 'üêπ' },
  { name: 'Rust', description: 'Langage de programmation syst√®me', category: 'Backend', color: '#000000', icon: 'ü¶Ä' },
  
  // Base de donn√©es
  { name: 'PostgreSQL', description: 'Syst√®me de gestion de base de donn√©es relationnel', category: 'Database', color: '#336791', icon: 'üêò' },
  { name: 'MongoDB', description: 'Base de donn√©es NoSQL orient√©e document', category: 'Database', color: '#47A248', icon: 'üçÉ' },
  { name: 'MySQL', description: 'Syst√®me de gestion de base de donn√©es relationnel', category: 'Database', color: '#4479A1', icon: 'üê¨' },
  { name: 'Redis', description: 'Base de donn√©es en m√©moire', category: 'Database', color: '#DC382D', icon: '‚ö°' },
  { name: 'SQLite', description: 'Moteur de base de donn√©es l√©ger', category: 'Database', color: '#003B57', icon: 'üì¶' },
  
  // DevOps
  { name: 'Docker', description: 'Plateforme de conteneurisation', category: 'DevOps', color: '#2496ED', icon: 'üê≥' },
  { name: 'Kubernetes', description: 'Orchestrateur de conteneurs', category: 'DevOps', color: '#326CE5', icon: '‚ò∏Ô∏è' },
  { name: 'AWS', description: 'Services cloud Amazon', category: 'DevOps', color: '#FF9900', icon: '‚òÅÔ∏è' },
  { name: 'GitHub Actions', description: 'Plateforme CI/CD de GitHub', category: 'DevOps', color: '#2088FF', icon: 'üîÑ' },
  { name: 'Terraform', description: 'Outil d\'infrastructure as code', category: 'DevOps', color: '#623CE4', icon: 'üèóÔ∏è' },
  
  // Mobile
  { name: 'React Native', description: 'Framework pour applications mobiles', category: 'Mobile', color: '#61DAFB', icon: 'üì±' },
  { name: 'Flutter', description: 'SDK de d√©veloppement mobile Google', category: 'Mobile', color: '#02569B', icon: 'üê¶' },
  { name: 'Swift', description: 'Langage pour d√©veloppement iOS', category: 'Mobile', color: '#FA7343', icon: 'üçé' },
  { name: 'Kotlin', description: 'Langage pour d√©veloppement Android', category: 'Mobile', color: '#7F52FF', icon: 'ü§ñ' },
  
  // Outils
  { name: 'Git', description: 'Syst√®me de contr√¥le de version', category: 'Tools', color: '#F05032', icon: 'üìù' },
  { name: 'Figma', description: 'Outil de design collaboratif', category: 'Tools', color: '#F24E1E', icon: 'üé®' },
  { name: 'Postman', description: 'Plateforme de test d\'API', category: 'Tools', color: '#FF6C37', icon: 'üìÆ' },
  { name: 'Jest', description: 'Framework de test JavaScript', category: 'Tools', color: '#C21325', icon: 'üß™' }
]

// Donn√©es de seed pour les projets
const projectsData = [
  {
    title: 'TaskFlow - Gestionnaire de T√¢ches',
    description: 'Une application compl√®te de gestion de t√¢ches avec interface moderne, collaboration en temps r√©el et syst√®me de notifications. Parfait pour apprendre React, Node.js et les WebSockets.',
    shortDesc: 'App de gestion de t√¢ches collaborative',
    status: 'OPEN',
    difficulty: 'INTERMEDIATE',
    maxMembers: 4,
    isPublic: true,
    tags: ['Productivit√©', 'Collaboration', 'Temps r√©el'],
    technologies: ['React', 'Node.js', 'PostgreSQL', 'TypeScript']
  },
  {
    title: 'EcoTracker - Suivi √âcologique',
    description: 'Application mobile pour suivre son empreinte carbone quotidienne avec gamification et conseils personnalis√©s. Int√®gre des APIs externes et utilise des charts interactifs.',
    shortDesc: 'App mobile d\'impact √©cologique',
    status: 'IN_PROGRESS',
    difficulty: 'ADVANCED',
    maxMembers: 6,
    isPublic: true,
    tags: ['√âcologie', 'Mobile', 'Gamification'],
    technologies: ['React Native', 'Python', 'MongoDB', 'Docker']
  },
  {
    title: 'DevMentor - Plateforme de Mentorat',
    description: 'Plateforme connectant d√©veloppeurs juniors et seniors pour du mentorat. Syst√®me de matching, planning de sessions et suivi de progression.',
    shortDesc: 'Plateforme de mentorat tech',
    status: 'PLANNING',
    difficulty: 'ADVANCED',
    maxMembers: 5,
    isPublic: true,
    tags: ['√âducation', 'Mentorat', 'Communaut√©'],
    technologies: ['Vue.js', 'Python', 'PostgreSQL', 'Redis']
  },
  {
    title: 'LocalMarket - E-commerce Local',
    description: 'Marketplace pour commerces locaux avec g√©olocalisation, syst√®me de commandes et livraisons. Interface admin compl√®te et app mobile pour les livreurs.',
    shortDesc: 'E-commerce pour commerces locaux',
    status: 'OPEN',
    difficulty: 'ADVANCED',
    maxMembers: 8,
    isPublic: true,
    tags: ['E-commerce', 'Local', 'G√©olocalisation'],
    technologies: ['React', 'Node.js', 'PostgreSQL', 'Docker', 'AWS']
  },
  {
    title: 'StudyBuddy - Assistant d\'√âtude',
    description: 'Application d\'aide aux √©tudes avec techniques de m√©morisation, quiz personnalis√©s et suivi de progression. Interface simple et efficace.',
    shortDesc: 'Assistant personnel d\'√©tude',
    status: 'IN_PROGRESS',
    difficulty: 'BEGINNER',
    maxMembers: 3,
    isPublic: true,
    tags: ['√âducation', 'M√©morisation', 'Quiz'],
    technologies: ['React', 'TypeScript', 'SQLite']
  },
  {
    title: 'FitTracker - Suivi Fitness',
    description: 'App de suivi d\'entra√Ænements avec programmes personnalis√©s, statistiques d√©taill√©es et communaut√©. Int√©gration avec wearables.',
    shortDesc: 'Application de suivi fitness',
    status: 'COMPLETED',
    difficulty: 'INTERMEDIATE',
    maxMembers: 4,
    isPublic: true,
    tags: ['Fitness', 'Sant√©', 'Communaut√©'],
    technologies: ['Flutter', 'Go', 'PostgreSQL', 'Redis']
  },
  {
    title: 'CodeReview Tool',
    description: 'Outil de revue de code avec analyse automatique, suggestions d\'am√©lioration et int√©gration Git. Dashboard pour √©quipes de d√©veloppement.',
    shortDesc: 'Outil de revue de code avanc√©',
    status: 'OPEN',
    difficulty: 'ADVANCED',
    maxMembers: 6,
    isPublic: true,
    tags: ['D√©veloppement', 'Code Quality', 'Git'],
    technologies: ['TypeScript', 'Python', 'MongoDB', 'Docker', 'Git']
  },
  {
    title: 'WeatherApp - M√©t√©o Moderne',
    description: 'Application m√©t√©o avec design moderne, pr√©visions d√©taill√©es et alertes personnalis√©es. Parfait projet pour d√©buter.',
    shortDesc: 'App m√©t√©o avec design moderne',
    status: 'PLANNING',
    difficulty: 'BEGINNER',
    maxMembers: 2,
    isPublic: true,
    tags: ['M√©t√©o', 'API', 'Design'],
    technologies: ['React', 'TypeScript', 'Tailwind CSS']
  },
  {
    title: 'CryptoPortfolio - Tracker Crypto',
    description: 'Tracker de portfolio crypto avec graphiques en temps r√©el, alertes de prix et analyse technique. Int√©gration avec plusieurs exchanges.',
    shortDesc: 'Gestionnaire de portfolio crypto',
    status: 'IN_PROGRESS',
    difficulty: 'INTERMEDIATE',
    maxMembers: 4,
    isPublic: true,
    tags: ['Crypto', 'Finance', 'Trading'],
    technologies: ['React', 'Node.js', 'MongoDB', 'WebSockets']
  },
  {
    title: 'BlogCMS - Syst√®me de Blog',
    description: 'CMS moderne pour blogs avec √©diteur WYSIWYG, gestion des m√©dias, SEO et th√®mes personnalisables. Interface admin intuitive.',
    shortDesc: 'CMS moderne pour blogs',
    status: 'OPEN',
    difficulty: 'INTERMEDIATE',
    maxMembers: 5,
    isPublic: true,
    tags: ['CMS', 'Blog', 'SEO'],
    technologies: ['Vue.js', 'PHP', 'MySQL', 'Docker']
  }
]

async function main() {
  console.log('üå± D√©but du seed...')

  // Cr√©er les comp√©tences
  console.log('üìö Cr√©ation des comp√©tences...')
  const createdSkills = []
  
  for (const skillData of skillsData) {
    const skill = await prisma.skill.upsert({
      where: { name: skillData.name },
      update: {},
      create: skillData
    })
    createdSkills.push(skill)
    console.log(`‚úÖ Comp√©tence cr√©√©e: ${skill.name}`)
  }

  // Cr√©er un utilisateur de test pour √™tre le cr√©ateur des projets
  console.log('üë§ Cr√©ation de l\'utilisateur de test...')
  const testUser = await prisma.user.upsert({
    where: { email: 'admin@skillcraft.dev' },
    update: {},
    create: {
      email: 'admin@skillcraft.dev',
      username: 'admin_skillcraft',
      firstName: 'Admin',
      lastName: 'SkillCraft',
      name: 'Admin SkillCraft',
      isAdmin: true,
      bio: 'Compte administrateur pour la gestion de la plateforme SkillCraft'
    }
  })
  console.log(`‚úÖ Utilisateur cr√©√©: ${testUser.username}`)

  // Cr√©er les projets
  console.log('üöÄ Cr√©ation des projets...')
  
  for (const projectData of projectsData) {
    // Extraire les technologies du projet
    const { technologies, ...projectInfo } = projectData
    
    const project = await prisma.project.create({
      data: {
        ...projectInfo,
        creatorId: testUser.id,
        startDate: new Date(),
        endDate: new Date(Date.now() + 90 * 24 * 60 * 60 * 1000), // +3 mois
      }
    })
    
    // Associer les technologies au projet
    for (const techName of technologies) {
      const skill = createdSkills.find(s => s.name === techName)
      if (skill) {
        await prisma.projectTechnology.create({
          data: {
            projectId: project.id,
            skillId: skill.id
          }
        })
      }
    }
    
    console.log(`‚úÖ Projet cr√©√©: ${project.title}`)
  }

  console.log('üéâ Seed termin√© avec succ√®s !')
  console.log(`üìä Statistiques:`)
  console.log(`   - ${createdSkills.length} comp√©tences cr√©√©es`)
  console.log(`   - ${projectsData.length} projets cr√©√©s`)
  console.log(`   - 1 utilisateur administrateur cr√©√©`)
}

main()
  .then(async () => {
    await prisma.$disconnect()
  })
  .catch(async (e) => {
    console.error('‚ùå Erreur lors du seed:', e)
    await prisma.$disconnect()
    process.exit(1)
  })