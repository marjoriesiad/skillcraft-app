// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
id                  String               @id @default(cuid())
  firstName           String?
  lastName            String?
  username            String?              @unique
  email               String               @unique
  passwordHash            String?
  createdAt           DateTime             @default(now())
  image               String?
  isEarlyUser         Boolean?
  name                String?
  emailVerified       DateTime?
  acceptNewsletter    Boolean?             @default(true)
  bio                 String?
  discordId           String?
  isAdmin             Boolean?             @default(false)
  isBetaTester        Boolean?             @default(false)
  isContributor       Boolean?             @default(false)
  location            String?
  twitterId           String?
  updatedAt           DateTime             @default(now()) @updatedAt
  website             String?
  resetToken          String?              @unique
  resetTokenExpires   DateTime?
  activities          Activity[]
  tasksAssigned       KanbanTask[]         @relation("UserAssignedTasks")
  createdProjects     Project[]            @relation("ProjectCreator")
  badges              UserBadge[]
  skills              UserSkill[]
  projectApplications ProjectApplication[]
  projectMemberships  ProjectMember[]
  messageReads        ProjectMessageRead[] @relation("MessageReads")
  projectMessages     ProjectMessage[]     @relation("ProjectMessages")
  projects            Project[]            @relation("UserProjects")
  createdInvitations  ProjectInvitation[]  @relation("CreatedInvitations")
  sentInvitations     ProjectInvitation[]  @relation("SentInvitations")
  receivedInvitations ProjectInvitation[]  @relation("ReceivedInvitations")

  // Relations Nextâ€‘Auth
  accounts      Account[]
  sessions      Session[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Skill {
  id                  String              @id @default(cuid())
  name                String              @unique
  description         String?
  category            String?
  color               String?
  icon                String?
  createdAt           DateTime            @default(now())
  badges              Badge[]
  userSkills          UserSkill[]
  projectTechnologies ProjectTechnology[] @relation("ProjectTechnologies")
}

model UserSkill {
  id        String     @id @default(cuid())
  userId    String
  skillId   String
  level     SkillLevel @default(BEGINNER)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @default(now()) @updatedAt
  skill     Skill      @relation(fields: [skillId], references: [id], onDelete: Cascade)
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, skillId])
}

/// /// BADGES SYSTEM //////
model Badge {
  id             String              @id @default(cuid())
  name           String              @unique
  description    String
  icon           String?
  color          String?
  criteria       String?
  conditionType  BadgeConditionType?
  conditionValue Int?
  skillId        String?
  skillLevel     SkillLevel?
  discordRoleId  String?
  isActive       Boolean             @default(true)
  createdAt      DateTime            @default(now())
  skill          Skill?              @relation(fields: [skillId], references: [id])
  userBadges     UserBadge[]
}

model UserBadge {
  id       String   @id @default(cuid())
  userId   String
  badgeId  String
  earnedAt DateTime @default(now())
  badge    Badge    @relation(fields: [badgeId], references: [id], onDelete: Cascade)
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, badgeId])
}

/// /// PROJECTS SYSTEM //////
model Project {
  id                        String               @id @default(cuid())
  title                     String
  description               String
  shortDesc                 String?
  status                    ProjectStatus        @default(PLANNING)
  difficulty                ProjectDifficulty    @default(BEGINNER)
  maxMembers                Int?
  isPublic                  Boolean              @default(true)
  githubUrl                 String?
  liveUrl                   String?
  image                     String?
  tags                      String[]
  createdAt                 DateTime             @default(now())
  updatedAt                 DateTime             @default(now()) @updatedAt
  startDate                 DateTime?
  endDate                   DateTime?
  creatorId                 String
  allowMembersToCreateTasks Boolean              @default(false)
  columns                   KanbanColumn[]
  creator                   User                 @relation("ProjectCreator", fields: [creatorId], references: [id], onDelete: Cascade)
  applications              ProjectApplication[]
  members                   ProjectMember[]
  messages                  ProjectMessage[]     @relation("ProjectMessages")
  technologies              ProjectTechnology[]
  users                     User[]               @relation("UserProjects")
  invitations               ProjectInvitation[]

  @@index([status])
  @@index([isPublic])
  @@index([creatorId])
}

/// /// PROJECT COLLABORATION //////
model ProjectMember {
  id        String      @id @default(cuid())
  role      ProjectRole @default(MEMBER)
  joinedAt  DateTime    @default(now())
  projectId String
  userId    String
  project   Project     @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([projectId, userId])
  @@map("project_members")
}

model ProjectTechnology {
  id        String  @id @default(cuid())
  projectId String
  skillId   String
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  skill     Skill   @relation("ProjectTechnologies", fields: [skillId], references: [id], onDelete: Cascade)

  @@unique([projectId, skillId])
  @@map("project_technologies")
}

model ProjectApplication {
  id         String            @id @default(cuid())
  message    String?
  status     ApplicationStatus @default(PENDING)
  appliedAt  DateTime          @default(now())
  reviewedAt DateTime?
  projectId  String
  userId     String
  project    Project           @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user       User              @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([projectId, userId])
  @@map("project_applications")
}

model ProjectInvitation {
  id            String              @id @default(cuid())
  token         String              @unique
  email         String?
  invitedUserId String?
  message       String?
  status        InvitationStatus    @default(PENDING)
  createdAt     DateTime            @default(now())
  expiresAt     DateTime
  acceptedAt    DateTime?
  rejectedAt    DateTime?
  projectId     String
  creatorId     String
  invitedById   String?
  project       Project             @relation(fields: [projectId], references: [id], onDelete: Cascade)
  creator       User                @relation("CreatedInvitations", fields: [creatorId], references: [id], onDelete: Cascade)
  invitedBy     User?               @relation("SentInvitations", fields: [invitedById], references: [id], onDelete: SetNull)
  invitedUser   User?               @relation("ReceivedInvitations", fields: [invitedUserId], references: [id], onDelete: SetNull)

  @@map("project_invitations")
}

model Activity {
  id          String       @id @default(cuid())
  userId      String
  type        ActivityType
  title       String
  description String?
  entityId    String?
  entityType  String?
  createdAt   DateTime     @default(now())
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([createdAt])
}

/// /// PROJECT CHAT SYSTEM //////
model ProjectMessage {
  id           String               @id @default(cuid())
  content      String
  userId       String
  projectId    String
  createdAt    DateTime             @default(now())
  updatedAt    DateTime             @updatedAt
  edited       Boolean              @default(false)
  editedAt     DateTime?
  messageReads ProjectMessageRead[]
  project      Project              @relation("ProjectMessages", fields: [projectId], references: [id], onDelete: Cascade)
  user         User                 @relation("ProjectMessages", fields: [userId], references: [id], onDelete: Cascade)

  @@index([projectId, createdAt])
  @@index([userId])
  @@map("project_messages")
}

model ProjectMessageRead {
  id        String         @id @default(cuid())
  messageId String
  userId    String
  readAt    DateTime       @default(now())
  message   ProjectMessage @relation(fields: [messageId], references: [id], onDelete: Cascade)
  user      User           @relation("MessageReads", fields: [userId], references: [id], onDelete: Cascade)

  @@unique([messageId, userId])
  @@map("project_message_reads")
}

model KanbanColumn {
  id        String       @id @default(cuid())
  title     String
  order     Int
  projectId String
  project   Project      @relation(fields: [projectId], references: [id], onDelete: Cascade)
  tasks     KanbanTask[]
}

model KanbanTask {
  id           String       @id @default(cuid())
  title        String
  description  String?
  priority     TaskPriority @default(MEDIUM)
  labels       String[]
  assignedToId String?
  columnId     String
  order        Int
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  assignedTo   User?        @relation("UserAssignedTasks", fields: [assignedToId], references: [id])
  column       KanbanColumn @relation(fields: [columnId], references: [id], onDelete: Cascade)
}

model Test {
  id        String   @id
  message   String
  createdAt DateTime @default(now())
}

enum SkillLevel {
  BEGINNER
  INTERMEDIATE
  ADVANCED
  EXPERT
  UNDEFINED
}

enum BadgeConditionType {
  PROJECTS_CREATED
  PROJECTS_COMPLETED
  SKILL_LEVEL
  EARLY_USER
  CUSTOM
}

enum ProjectStatus {
  PLANNING
  OPEN
  IN_PROGRESS
  COMPLETED
  ON_HOLD
  CANCELLED
}

enum ProjectDifficulty {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}

enum ProjectRole {
  OWNER
  ADMIN
  MEMBER
}

enum ApplicationStatus {
  PENDING
  ACCEPTED
  REJECTED
}

enum InvitationStatus {
  PENDING
  ACCEPTED
  REJECTED
  EXPIRED
}

/// /// ACTIVITY SYSTEM //////
enum ActivityType {
  PROJECT_CREATED
  PROJECT_UPDATED
  PROJECT_COMPLETED
  PROJECT_JOINED
  PROJECT_LEFT
  BADGE_EARNED
  SKILL_ACQUIRED
  USER_JOINED
  USER_LEVEL_UP
  ADMIN_USER_UPDATED
  ADMIN_USER_DELETED
  ADMIN_USER_ROLE_CHANGED
  ADMIN_PROJECT_DELETED
  ADMIN_PROJECT_UPDATED
  ADMIN_BADGE_CREATED
  ADMIN_BADGE_DELETED
  ADMIN_SKILL_CREATED
  ADMIN_SKILL_DELETED
  ADMIN_SYSTEM_MAINTENANCE
  ADMIN_CACHE_CLEARED
  ADMIN_BACKUP_CREATED
  ADMIN_SETTINGS_UPDATED
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
}